#!/usr/bin/env python3
"""
Script de prueba simple para verificar que la imputaci√≥n por correlaci√≥n funciona correctamente.
"""

import pandas as pd
import numpy as np
from Modulos.imputacion_correlacion import imputaciones_correlacion, cargar_y_validar_datos

def test_imputacion_simple():
    """Prueba b√°sica de la imputaci√≥n por correlaci√≥n."""
    
    try:
        # Cargar datos
        df = cargar_y_validar_datos("Data/Datos_aeronaves.xlsx")
        print("‚úÖ Datos cargados exitosamente")
        print(f"Shape del DataFrame: {df.shape}")
        
        # Crear datos de prueba con algunos valores faltantes
        df_test = df.copy()
        
        # Buscar columnas num√©ricas con valores v√°lidos
        columnas_numericas = df.select_dtypes(include=[np.number]).columns.tolist()
        if len(columnas_numericas) >= 2:
            col_objetivo = columnas_numericas[0]
            # Crear algunos valores faltantes artificialmente
            indices_validos = df_test[df_test[col_objetivo].notna()].index
            if len(indices_validos) > 3:
                # Crear un valor faltante para probar
                idx_test = indices_validos[0]
                df_test.at[idx_test, col_objetivo] = np.nan
                print(f"‚úÖ Creando valor faltante en '{col_objetivo}', fila {idx_test}")
                
                # Ejecutar imputaci√≥n
                print("‚è≥ Ejecutando imputaci√≥n por correlaci√≥n...")
                df_resultado, reporte = imputaciones_correlacion(df_test)
                
                print("‚úÖ Imputaci√≥n completada exitosamente")
                print(f"üìä Reporte generado con {len(reporte)} entradas")
                
                # Verificar si se imput√≥ el valor
                valor_imputado = df_resultado.at[idx_test, col_objetivo]
                if not pd.isna(valor_imputado):
                    print(f"‚úÖ Valor imputado: {valor_imputado}")
                    
                    # Mostrar informaci√≥n del reporte
                    for item in reporte:
                        if item.get("Aeronave") == idx_test and item.get("Par√°metro") == col_objetivo:
                            print(f"   Tipo Modelo: {item.get('Tipo Modelo', 'N/A')}")
                            print(f"   Confianza: {item.get('Confianza', 'N/A')}")
                            print(f"   MAPE: {item.get('MAPE', 'N/A')}")
                            print(f"   R¬≤: {item.get('R2', 'N/A')}")
                            break
                else:
                    print("‚ùå No se pudo imputar el valor")
                    
                return True
            else:
                print("‚ùå No hay suficientes datos v√°lidos para la prueba")
                return False
        else:
            print("‚ùå No hay suficientes columnas num√©ricas")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("="*60)
    print("PRUEBA DE IMPUTACI√ìN POR CORRELACI√ìN")
    print("="*60)
    success = test_imputacion_simple()
    print("="*60)
    if success:
        print("‚úÖ PRUEBA EXITOSA")
    else:
        print("‚ùå PRUEBA FALLIDA")
    print("="*60)
